# Archivo de propiedades para el microservicio "twitter-to-kafka-service"
twitter-to-kafka-service:
  twitter-keywords:
    - Java
    - Microservices
    - Spring
    - Kafka
    - Elasticsearch
  welcome-message: Hello microservices!
  # Nota: Si no usamos el mock de tweets, tenemos que tener una cuenta de desarrollo de Twitter creada y establecer
  # las credenciales en el archivo de propiedades "twitter4j.properties"
  enable-mock-tweets: true
  mock-min-tweet-length: 5
  mock-max-tweet-length: 15
  mock-sleep-ms: 10000

retry-config:
  initial-interval-ms: 1000
  max-interval-ms: 10000
  multiplier: 2.0
  maxAttempts: 3
  sleep-time-ms: 2000

kafka-config:
  bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://localhost:8081
  topic-name: twitter-topic
  topic-names-to-create:
    - twitter-topic
  num-of-partitions: 3
  replication-factor: 3

kafka-producer-config:
  # key de tipo Long
  key-serializer-class: org.apache.kafka.common.serialization.LongSerializer
  # Mensaje de tipo Avro
  value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
  # Usamos la librería "Snappy" para la compresión(de Google)
  compression-type: snappy
  # Para obtener el ack de todas las réplicas(Valor 1 - Espera por el ark del actual broker/Valor 0 - No se espera por ningún ack)
  acks: all
  # Note: To increase throughput we can increase the batched data in request.
  #       This can be done by increasing the batch size, adding a compression as batching is done after compression,
  #       and increase the linger ms to add a delay on producer client to wait more and send more data at once.
  # Aunque se ha especificado aquí, 16KB es el valor por defecto si no se indica
  batch-size: 16384
  # Se aplica sobre el "batch size" y es para mejorar el rendimiento
  # Factor para incrementar 100 veces el valor del "batch-size" y así habilitar más batching y tener mejor rendimiento
  batch-size-boost-factor: 100
  # Añade un retraso de 5ms al cliente productor para que espere antes de enviar los registros a Kafka
  linger-ms: 5
  # Después de 60s, si el cliente productor no ha recibido ningún ack, lanzará una excepción por timeout
  request-timeout-ms: 60000
  # Se reintentará 5 veces en caso de fallos
  retry-count: 5